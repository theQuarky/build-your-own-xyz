
Test Case #1 (./live.test.tspp):
Source Code:
// Missing semicolons
let x: int = 42
let y: float = 3.14

// Invalid type assignments
let str: string = 42;
let num: int = "hello";
let bool: boolean = 1;

// Undefined variables
let result: int = undefinedVar + 10;

// Invalid operators
let z: int = 5 $$$ 3;

// Missing type annotations
let noType = 42;
const PI = 3.14159;

// Invalid function declarations
function missingReturnType(x: int) {
    return x + 1;
}

function missingParameterType(x, y: int): int {
    return x + y;
}

// Multiple statements on one line without semicolons
let a: int = 1 let b: int = 2

// Invalid block structures
if (x > 0) {
    let inner: int = 10;
    // Missing closing brace

// Mismatched types in operations
let mixed: int = "string" + 42;

// Invalid function calls
calculateArea("10", true);

// Invalid bitwise operations
let bits: int = "string" >>> 2;

// Unterminated string
let message: string = "Hello, world;

// Invalid escape sequences in strings
let escape: string = "Invalid escape \z sequence";

// Multiple errors on one line
let e1: int = 42, e2: string = true; e3: boolean = "false"

// Invalid binary operations
let div: int = 10 / "2";
let mul: float = "3" * 4.5;

// Missing parameters in function call
function twoParams(x: int, y: int): int { return x + y; }
let callResult: int = twoParams(1);

// Invalid boolean operations
let boolOp: boolean = true && 1;

// Duplicate variable declarations
let dup: int = 1;
let dup: string = "duplicate";

// Invalid assignments to constants
const CONSTANT: int = 100;
CONSTANT = 200;

// Invalid return types
function returnMismatch(): int {
    return "string";
}

// Missing required blocks
if (x > 0)
    return x
else
    return y

// Invalid increment/decrement
let str2: string = "hello";
str2++;

Tokens:
--------------------------------------------------------------------------------
Token Type          Lexeme              Line      Column    Error Message
--------------------------------------------------------------------------------
LET                 let                 2         1         
IDENTIFIER          x                   2         5         
COLON               :                   2         6         
TYPE_INT            int                 2         8         
ASSIGN              =                   2         12        
NUMBER              42                  2         14        
LET                 let                 3         1         
IDENTIFIER          y                   3         5         
COLON               :                   3         6         
TYPE_FLOAT          float               3         8         
ASSIGN              =                   3         14        
NUMBER              3.14                3         16        
SEMICOLON           ;                   3         20        
LET                 let                 6         1         
IDENTIFIER          str                 6         5         
COLON               :                   6         8         
TYPE_STRING         string              6         10        
ASSIGN              =                   6         17        
NUMBER              42                  6         19        
SEMICOLON           ;                   6         21        
LET                 let                 7         1         
IDENTIFIER          num                 7         5         
COLON               :                   7         8         
TYPE_INT            int                 7         10        
ASSIGN              =                   7         14        
STRING              hello               7         16        
SEMICOLON           ;                   7         23        
LET                 let                 8         1         
IDENTIFIER          bool                8         5         
COLON               :                   8         9         
TYPE_BOOLEAN        boolean             8         11        
ASSIGN              =                   8         19        
NUMBER              1                   8         21        
SEMICOLON           ;                   8         22        
LET                 let                 11        1         
IDENTIFIER          result              11        5         
COLON               :                   11        11        
TYPE_INT            int                 11        13        
ASSIGN              =                   11        17        
IDENTIFIER          undefinedVar        11        19        
PLUS                +                   11        32        
NUMBER              10                  11        34        
SEMICOLON           ;                   11        36        
LET                 let                 14        1         
IDENTIFIER          z                   14        5         
COLON               :                   14        6         
TYPE_INT            int                 14        8         
ASSIGN              =                   14        12        
NUMBER              5                   14        14        
ERROR                                   14        16        Unexpected character: '$'
ERROR                                   14        17        Unexpected character: '$'
ERROR                                   14        18        Unexpected character: '$'
NUMBER              3                   14        20        
SEMICOLON           ;                   14        21        
LET                 let                 17        1         
IDENTIFIER          noType              17        5         
ASSIGN              =                   17        12        
NUMBER              42                  17        14        
SEMICOLON           ;                   17        16        
CONST               const               18        1         
IDENTIFIER          PI                  18        7         
ASSIGN              =                   18        10        
NUMBER              3.14159             18        12        
SEMICOLON           ;                   18        19        
FUNCTION            function            21        1         
IDENTIFIER          missingReturnType   21        10        
LEFT_PAREN          (                   21        27        
IDENTIFIER          x                   21        28        
COLON               :                   21        29        
TYPE_INT            int                 21        31        
RIGHT_PAREN         )                   21        34        
LEFT_BRACE          {                   21        36        
RETURN              return              22        5         
IDENTIFIER          x                   22        12        
PLUS                +                   22        14        
NUMBER              1                   22        16        
SEMICOLON           ;                   22        17        
RIGHT_BRACE         }                   23        1         
SEMICOLON           ;                   23        2         
FUNCTION            function            25        1         
IDENTIFIER          missingParameterType25        10        
LEFT_PAREN          (                   25        30        
IDENTIFIER          x                   25        31        
COMMA               ,                   25        32        
IDENTIFIER          y                   25        34        
COLON               :                   25        35        
TYPE_INT            int                 25        37        
RIGHT_PAREN         )                   25        40        
COLON               :                   25        41        
TYPE_INT            int                 25        43        
LEFT_BRACE          {                   25        47        
RETURN              return              26        5         
IDENTIFIER          x                   26        12        
PLUS                +                   26        14        
IDENTIFIER          y                   26        16        
SEMICOLON           ;                   26        17        
RIGHT_BRACE         }                   27        1         
SEMICOLON           ;                   27        2         
LET                 let                 30        1         
IDENTIFIER          a                   30        5         
COLON               :                   30        6         
TYPE_INT            int                 30        8         
ASSIGN              =                   30        12        
NUMBER              1                   30        14        
ERROR                                   30        16        Multiple statements on one line require explicit semicolons
IDENTIFIER          Invalid             31        5         
IDENTIFIER          block               31        13        
IDENTIFIER          structures          31        19        
IF                  if                  32        1         
LEFT_PAREN          (                   32        4         
IDENTIFIER          x                   32        5         
GREATER_THAN        >                   32        7         
NUMBER              0                   32        9         
RIGHT_PAREN         )                   32        10        
LEFT_BRACE          {                   32        12        
LET                 let                 33        5         
IDENTIFIER          inner               33        9         
COLON               :                   33        14        
TYPE_INT            int                 33        16        
ASSIGN              =                   33        20        
NUMBER              10                  33        22        
SEMICOLON           ;                   33        24        
LET                 let                 37        1         
IDENTIFIER          mixed               37        5         
COLON               :                   37        10        
TYPE_INT            int                 37        12        
ASSIGN              =                   37        16        
STRING              string              37        18        
PLUS                +                   37        27        
NUMBER              42                  37        29        
SEMICOLON           ;                   37        31        
IDENTIFIER          calculateArea       40        1         
LEFT_PAREN          (                   40        14        
STRING              10                  40        15        
COMMA               ,                   40        19        
BOOLEAN             true                40        21        
RIGHT_PAREN         )                   40        25        
SEMICOLON           ;                   40        26        
LET                 let                 43        1         
IDENTIFIER          bits                43        5         
COLON               :                   43        9         
TYPE_INT            int                 43        11        
ASSIGN              =                   43        15        
STRING              string              43        17        
RIGHT_SHIFT         >>                  43        26        
GREATER_THAN        >                   43        28        
NUMBER              2                   43        30        
SEMICOLON           ;                   43        31        
LET                 let                 46        1         
IDENTIFIER          message             46        5         
COLON               :                   46        12        
TYPE_STRING         string              46        14        
ASSIGN              =                   46        21        
STRING              Hello, world;

// Invalid escape sequences in strings
let escape: string = 46        23        
IDENTIFIER          Invalid             46        100       
IDENTIFIER          escape              46        108       
ERROR                                   46        115       Unexpected character: '\'
IDENTIFIER          z                   46        116       
IDENTIFIER          sequence            46        118       
STRING              ;

// Multiple errors on one line
let e1: int = 42, e2: string = true; e3: boolean = 46        126       
BOOLEAN             false               46        213       
STRING              

// Invalid binary operations
let div: int = 10 / 46        218       
NUMBER              2                   46        271       
STRING              ;
let mul: float =  46        272       
NUMBER              3                   46        293       
STRING               * 4.5;

// Missing parameters in function call
function twoParams(x: int, y: int): int { return x + y; }
let callResult: int = twoParams(1);

// Invalid boolean operations
let boolOp: boolean = true && 1;

// Duplicate variable declarations
let dup: int = 1;
let dup: string = 46        294       
IDENTIFIER          duplicate           46        574       
STRING              ;

// Invalid assignments to constants
const CONSTANT: int = 100;
CONSTANT = 200;

// Invalid return types
function returnMismatch(): int {
    return 46        583       
TYPE_STRING         string              46        736       
STRING              ;
}

// Missing required blocks
if (x > 0)
    return x
else
    return y

// Invalid increment/decrement
let str2: string = 46        742       
IDENTIFIER          hello               46        869       
ERROR                                   46        874       Unexpected character: '"'
SEMICOLON           ;                   46        875       
IDENTIFIER          str2                47        1         
INCREMENT           ++                  47        5         
SEMICOLON           ;                   47        7         
EOF                                     47        8         
--------------------------------------------------------------------------------

AST Structure:
VarDeclaration 'num'
  Kind: let
  Type: int
  Initializer:
    Literal(hello)
VarDeclaration 'bool'
  Kind: let
  Type: boolean
  Initializer:
    Literal(1)
VarDeclaration 'result'
  Kind: let
  Type: int
  Initializer:
    BinaryOp('+')
      Left:
        Variable('')
      Right:
        Literal(10)
Return
  BinaryOp('+')
    Left:
      Variable('')
    Right:
      Literal(1)
Return
  BinaryOp('+')
    Left:
      Variable('')
    Right:
      Variable('')

Errors:

================================================================================
