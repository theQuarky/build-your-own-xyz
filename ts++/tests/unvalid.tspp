// Invalid type assignments
let str: string = 42;
let num: int = "hello";
let bool: boolean = 1;

// Undefined variables
let result: int = undefinedVar + 10;

// Invalid operators
let z: int = 5 $$$ 3;

// Missing type annotations
let noType = 42;
const PI = 3.14159;

// Invalid function declarations
function missingReturnType(x: int) {
    return x + 1;
}

function missingParameterType(x, y: int): int {
    return x + y;
}

// Multiple statements on one line without semicolons
let a: int = 1 let b: int = 2

// Invalid block structures
if (x > 0) {
    let inner: int = 10;
    // Missing closing brace

// Mismatched types in operations
let mixed: int = "string" + 42;

// Invalid function calls
calculateArea("10", true);

// Invalid bitwise operations
let bits: int = "string" >>> 2;

// Unterminated string
let message: string = "Hello, world;

// Invalid escape sequences in strings
let escape: string = "Invalid escape \z sequence";

// Multiple errors on one line
let e1: int = 42, e2: string = true; e3: boolean = "false"

// Invalid binary operations
let div: int = 10 / "2";
let mul: float = "3" * 4.5;

// Missing parameters in function call
function twoParams(x: int, y: int): int { return x + y; }
let callResult: int = twoParams(1);

// Invalid boolean operations
let boolOp: boolean = true && 1;

// Duplicate variable declarations
let dup: int = 1;
let dup: string = "duplicate";

// Invalid assignments to constants
const CONSTANT: int = 100;
CONSTANT = 200;

// Invalid return types
function returnMismatch(): int {
    return "string";
}

// Missing required blocks
if (x > 0)
    return x
else
    return y

// Invalid increment/decrement
let str2: string = "hello";
str2++;