// This sample TSPP file demonstrates various language features, except for interfaces and enums.

#static let globalCounter: int = 100;

function increment(x: int): int {
    return x + 1;
}

function pointerExample(): int {
    // Declare a pointer to int using the address-of operator.
    let p: int@ = @globalCounter;
    return *p + 10;
}

function identity<T>(value: T): T {
    return value;
}

// namespace MathOps {
//     function subtract(a: int, b: int): int {
//         return a - b;
//     }
    
//     function multiply(a: int, b: int): int {
//         return a * b;
//     }
// }

class Calculator {
    #packed let memory: int;

    // Constructor declaration.
    function Calculator(initial: int): void {
        this.memory = initial;
    }
    
    // Inline method to add two integers.
    #inline function add(a: int, b: int): int {
        return a + b;
    }
    
    // A method demonstrating control flow with a loop and conditional statements.
    function compute(): int {
        let total: int = 0;
        // Standard for-loop (using ForStmt syntax).
        for (let i = 0; i < 5; i++) {
            total += i;
        }
        if (total > 10) {
            total = this.add(total, 5);
        } else {
            total = this.add(total, -5);
        }
        return total;
    }
    
    function updateMemory(newVal: int): void {
        this.memory = newVal;
    }
}

function printArray(arr: int[]): void {
    // For-each loop to iterate over an array.
    for (let num of arr) {
        print("Array element: " + num);
    }
}

function main(): void {
    let result1: int = increment(5);
    let result2: int = pointerExample();
    let value: int = identity<int>(42);
    print("Increment result: " + result1);
    print("Pointer example result: " + result2);
    print("Identity function result: " + value);
    
    let calc: Calculator = new Calculator(10);
    calc.updateMemory(20);
    let computeResult: int = calc.compute();
    print("Calculator compute result: " + computeResult);
    
    // Array literal usage.
    let numbers: int[] = [1, 2, 3, 4, 5];
    printArray(numbers);
    
    // Using functions defined within a namespace.
    let diff: int = MathOps.subtract(10, 3);
    let prod: int = MathOps.multiply(4, 5);
    print("Subtraction result: " + diff);
    print("Multiplication result: " + prod);
}

main();
